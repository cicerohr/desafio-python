[tool.poetry]
name = "desafio-python"
version = "0.1.0"
description = ""
authors = ["Cícero <cicerohr@gmail.com>"]
readme = "README.md"
packages = [{ include = "desafio_python", from = "src" }]

[tool.poetry.dependencies]
python = "^3.11"

[tool.poetry.group.docs.dependencies]
mkdocs-material = "^9.1.13"
mkdocstrings = { extras = ["python"], version = "^0.21.2" }

[tool.poetry.group.dev.dependencies]
pytest = "^7.3.1"
pytest-cov = "^4.0.0"
blue = "^0.9.1"
taskipy = "^1.10.4"
isort = "^5.12.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
pythonpath = "."
addopts = "--doctest-modules"
markers = [
    "task: A concept exercise task.",
]

[tool.isort]
profile = "black"
line_length = 79

[tool.taskipy.tasks]
lint = "blue --check --diff . && isort --check --diff ."
docs = "mkdocs serve"
pre_test = "task lint"
test = "pytest -s -x --cov=src -vv"
#   -s: mostra as saídas no console
#   -x: saída rápida
#   -v: mostra o nome dos testes executados
#   -k: "nome_dos_testes": filtra resultados
#   -pdb: para debugar quando falha
post_test = "coverage html"